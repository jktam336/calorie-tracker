const db = require('../models/foodModels');

const foodController = {};

foodController.getFood = (req, res, next) => {
  const text  = 'SELECT * FROM "public"."foodTest2"';
  db
  .query(text)
  .then(data => {
    // for each foodEntry, add a last_entry_calories that calculates this last_serving's calories
    res.locals.foodEntries = data.rows.map((entry) => {
      const last_entry_calories = (entry.last_serving / entry.serving_size) * entry.calories;
      return {...entry, last_entry_calories}
    });
    // res.locals.foodEntries = data.rows;
    next();
  })
  .catch(e => next(e));
};

foodController.addFood = (req, res, next) => {
  // destructure req.body into column names
  const {name, serving_size, calories, fat = 0, cholesterol = 0, sodium = 0, carbohydrates = 0, fiber = 0, sugars = 0, protein = 0, last_serving = 0} = req.body;

  // postgreSQL query string
  const text = `INSERT INTO "public"."foodTest2" (name, serving_size, calories, fat, cholesterol, sodium, carbohydrates, fiber, sugars, protein, last_serving)
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING "public"."foodTest2"._id`;
  // query parameters
  const values = [name, serving_size, calories, fat, cholesterol, sodium, carbohydrates, fiber, sugars, protein, last_serving];
  db
    .query(text, values)
    .then(data => {
      next();
    }) 
    .catch(e => next(e));
};

foodController.deleteFood = (req, res, next) => {
  const text = `DELETE FROM "public"."foodTest2" WHERE name = $1;`;
  const values = [req.query.name];
  db
    .query(text, values)
    .then(data => {
      next();
    })
    .catch(e => next(e));
};

foodController.updateFood = (req, res, next) => {
  const text = `UPDATE "public"."foodTest2" SET last_serving = $2 WHERE name = $1;`;
  const values = [req.query.name, req.query.last_serving];
  db
    .query(text, values)
    .then(data => {
      next();
    })
    .catch(e => next(e));
};



module.exports = foodController;
